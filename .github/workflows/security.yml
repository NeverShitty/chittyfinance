name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --omit=dev
        npm audit --json --audit-level=moderate --omit=dev > audit-results.json || true

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: audit-results.json
        retention-days: 30

    - name: Check for critical vulnerabilities
      run: |
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Get audit results
        npm audit --json --audit-level=critical --omit=dev 2>/dev/null > audit.json || true
        
        # Parse results
        CRITICAL_COUNT=$(cat audit.json | jq '.metadata.vulnerabilities.critical // 0')
        HIGH_COUNT=$(cat audit.json | jq '.metadata.vulnerabilities.high // 0')
        
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found! Failing build."
          exit 1
        fi
        
        if [ "$HIGH_COUNT" -gt 5 ]; then
          echo "⚠️ Too many high-severity vulnerabilities found! Review required."
          exit 1
        fi

  code-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t chittyfinance:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'chittyfinance:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application for testing
      run: |
        NODE_ENV=test npm start &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        sleep 15
      env:
        DATABASE_URL: "postgresql://test:test@localhost/test"
        SESSION_SECRET: "test-secret-for-security-headers-check"
        ENCRYPTION_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"

    - name: Test security headers
      run: |
        # Test for essential security headers
        RESPONSE_HEADERS=$(curl -I -s http://localhost:5000/)
        
        echo "Response headers:"
        echo "$RESPONSE_HEADERS"
        
        # Check for required security headers
        echo "$RESPONSE_HEADERS" | grep -i "x-frame-options" || (echo "❌ Missing X-Frame-Options header" && exit 1)
        echo "$RESPONSE_HEADERS" | grep -i "x-content-type-options" || (echo "❌ Missing X-Content-Type-Options header" && exit 1)
        echo "$RESPONSE_HEADERS" | grep -i "strict-transport-security" || echo "⚠️ Missing HSTS header (expected in production)"
        echo "$RESPONSE_HEADERS" | grep -i "content-security-policy" || echo "⚠️ Missing CSP header"
        
        echo "✅ Security headers check completed"

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, docker-security, security-headers]
    if: always()
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Job status summary
        echo "## Job Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Code Analysis: ${{ needs.code-scan.result }}" >> security-summary.md
        echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Container Security: ${{ needs.docker-security.result }}" >> security-summary.md
        echo "- Security Headers: ${{ needs.security-headers.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add recommendations
        echo "## Recommendations" >> security-summary.md
        echo "- Review and address any identified vulnerabilities" >> security-summary.md
        echo "- Keep dependencies updated regularly" >> security-summary.md
        echo "- Monitor security alerts and advisories" >> security-summary.md
        echo "- Validate all user inputs and sanitize outputs" >> security-summary.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-summary.md
        retention-days: 90